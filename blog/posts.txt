var contextPosts = {
    posts: [
    /*  new post
    {
        id: 'n',
        title: "",
        author: { name: "Kevin Lubick" },
        date: new Date('12-27-2012'),
        excerpt: "",
        bodyArr:[
		"",
		""
		]
    }  
    */

    {
        id: '1',
        title: "Building my First Findbugs Detector",
        author: { name: "Kevin Lubick" },
        date: new Date('4-28-2014 13:00:00'),
        excerpt: "My less-than-legendary, yet successful story of building a <a href='http://findbugs.sourceforge.net/'>FindBugs</a> plugin to detect ExecutorServices that have not been properly shutdown.  <a href='https://github.com/mebigfatguy/fb-contrib/pull/14'>End result</a>.",
        bodyArr: [
	"<p class='log'>Code log entry 084: After roughly 187 minutes of analyzing using the <a href = 'http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html'>Java Visual VM</a>, the cause of the non-terminating program was found.  A lone ExecutorService was found to have never been shutdown(), and the internal thread pool had been keeping the JVM from terminating.  A proper call to shutdown() was added to the offending class's stop() method, resolving the issue.</p>",
	
	"<p>The problem I ran into above was a painful one to track down, but my intuition said the problem would make for a great <a href='http://findbugs.sourceforge.net/'>FindBugs</a> detector because it dealt with omission of code, which is easy for static analysis to detect and generally time-consuming for humans to detect.</p>",
	
	"<p>What follows is how I designed a detector to hopefully make the struggles detailed in entry 084 obsolete.  It is meant for readers who have not yet implemented a FindBugs detector, but are curious at what it entails and what a sample workflow might be.</p>",
	
	"<h2>Recipe for FindBugs Detector</h2>",
	
	"<div class='recipe'><dl><dt>Preparation time</dt> <dd>30m</dd><dt>Coding time</dt> <dd>1h</dd><dt>Difficulty</dt> <dd>Derived from existing detector</dd><dt>Serves</dt> <dd>the purpose of a nice, easy introduction</dd></dl></div>",
	
	"<p>When I implemented this detector, I contributed it to fb-contrib.  Pedagogically, if you don't have to worry about messing up the actual FindBugs code and you want to focus more on the detector and less on all of FindBugs internals, so I recommend doing the same for your first detector.</p>",
	
    "<p>This recipe assumes the following conditions: <ul>",
	"<li>You have the source code for both FindBugs and <a href='https://github.com/mebigfatguy/fb-contrib'>fb-contrib</a> downloaded and ready to build (I recommend Eclipse)</li>",
	"<li>You have read (or at least skimmed) Chris Grindstaff's <a href = 'https://www.ibm.com/developerworks/library/j-findbug2/'>high level overview</a> of building a FindBugs detector at least once.  Don't worry if you don't understand everything, we'll be covering a lot of the topics and, trust me, things get much clearer when you do them yourself.</li>",
	"<li>You've read the <a href='http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html'>JavaDoc</a> for Executors (the protagonist of our story) and perhaps browsed <a href='http://www.javacodegeeks.com/2013/01/java-thread-pool-example-using-executors-and-threadpoolexecutor.html'>this sample code</a> to get a feel for things.</li>",
	"<li>You have a JDK installed, and a reference to it in your path.</li></ul></p>",
	
	"<h3>Setting up our TestBed</h3>",
	'<p>If you have ever done Test Driven Development, writing your test code first is not a new idea.  For building FindBugs detectors, it is even more important because we need the source code to generate the Java bytecode that FindBugs scans.  I haven\'t found a way to make FindBugs operate in a unit test scenario (i.e. run tests and watch a green bar as they pass), but I still write test cases with code that should and should not work.</p>',
	
	"<p>Let's make a file, called HES_Sample.java, that will contain some buggy code.  I immediately replicated (and simplified) the case that caused me 3 hours of debugging to track down, as well as the fixed version:</p>",
	'<div class="codeContainer"><pre data-src="blog/code/first_detector_oneUnitTest.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment"><span class="mouseComment" data-show="5+19">Lines 5 and 19: I tend to use this //tag and //no tag notation to indicate that FindBugs should put a notification on the next line.  </span>',
	'<span class="mouseComment" data-show="30">Line 30: This call to shutdown() is what we will look for to determine if an ExecutorService has to the potential to ever be shutdown, or not (like the example above)</span>',
	'<span class="mouseComment" data-show="34">Line 34: I made a dummy class to save on typing lots of anonymous classes. </span>',
	'</div></div>',
	"<p>For those of you thinking ahead, there are (at least) two more cases where ExecutorServices can be left hanging, or be misused, which we'll hit in later sections.</p>",
	
	"<h3>Finding some detector code to work with</h3>",
	"<p>Chris Grindstaff recommends finding a similar detector to base our new detector off, and I heartily agree, especially for the first, second or nth detector that you plan to write.</p>",
	
	"<p>There is no magic way to find a similar enough detector, but I've had luck browsing through the fb-contrib <a href='https://github.com/mebigfatguy/fb-contrib/blob/master/etc/messages.xml'>messages.xml</a> file until I find a message that seems familiar.  I, by a stroke of luck, had been recently improving the message on the <a href='https://github.com/mebigfatguy/fb-contrib/blob/ecf7de05da21e4c1960e6df714fa3adfc56e074a/src/com/mebigfatguy/fbcontrib/detect/PossibleMemoryBloat.java'>PMB_PossibleMemoryBloat detector</a>, which seemed like a good start.  It seems suitable because it detects collections that never get a call to remove(), clear() or similar methods, which is similar to what we want to do.</p>",
	
	'<div class="codeContainer"><pre data-src="blog/code/PMB.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment">',
	"<span class='mouseComment' data-show=3>fb-contrib is released under the <a href='https://tldrlegal.com/license/gnu-lesser-general-public-license-v2.1-(lgpl-2.1)'>LGPL</a></span>",
	'</div></div>',
	"<h3>Detecting no shutdown() calls</h3>",
	
	"<h3>Detecting local ExecutorServices</h3>",
	
	"<h3>Detecting the replacement of an ExecutorService</h3>",
	
	"<h3>Merging in my contribution</h3>"
	]
    }]
};