var contextPosts = {
    posts: [
    /*  new post
    {
        id: 'n',
        title: "",
        author: { name: "Kevin Lubick" },
        date: new Date('12-27-2012'),
        excerpt: "",
        bodyArr:[
		"",
		""
		]
    }  
    */

    {
        id: '1',
        title: "Building my First Findbugs Detector",
        author: { name: "Kevin Lubick" },
        date: new Date('4-28-2014 13:00:00'),
        excerpt: "My less-than-legendary, yet successful story of building a <a href='http://findbugs.sourceforge.net/'>FindBugs</a> plugin to detect ExecutorServices that have not been properly shutdown.  <a href='https://github.com/mebigfatguy/fb-contrib/pull/14'>End result</a>.",
        bodyArr: [
	'<div class="codeContainer"><pre data-src="blog/sample.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment"><span class="mouseComment" data-show="1">Line 1: I am a code comment. I am a code comment. I am a code comment. I am a code comment.</span></div>',
	'</div>',
	
	"<p class='log'>Code log entry 084: After roughly 187 minutes of analyzing using the <a href = 'http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html'>Java Visual VM</a>, the cause of the non-terminating program was found.  A lone ExecutorService was found to have never been shutdown(), and the internal thread pool had been keeping the JVM from terminating.  A proper call to shutdown() was added to the offending class's stop() method, resolving the issue.</p>",
	
	"<p>The problem I ran into above was a painful one to track down, but my intuition said the problem would make for a great <a href='http://findbugs.sourceforge.net/'>FindBugs</a> detector because it dealt with omission of code, which is easy for static analysis to detect and generally time-consuming for humans to detect.</p>",
	
	"<p>What follows is how I designed a detector to hopefully make the struggles detailed in entry 084 obsolete.  It is meant for readers who have not yet implemented a FindBugs detector, but are curious at what it entails and what a sample workflow might be.</p>",
	
	"<h2>Recipe for FindBugs Detector</h2>",
	
	"<div class='recipe'><dl><dt>Preparation time</dt> <dd>30m</dd><dt>Coding time</dt> <dd>1h</dd><dt>Difficulty</dt> <dd>Derived from existing detector</dd><dt>Serves</dt> <dd>the purpose of a nice, easy introduction</dd></dl></div>",
	
	"<p>When I implemented this detector, I contributed it to fb-contrib.  Pedagogically, if you don't have to worry about messing up the actual FindBugs code and you want to focus more on the detector and less on all of FindBugs internals, so I recommend doing the same for your first detector.</p>",
	
    "<p>This recipe assumes the following conditions: <ul>",
	"<li>You have the source code for both FindBugs and <a href='https://github.com/mebigfatguy/fb-contrib'>fb-contrib</a> downloaded and ready to build (I recommend Eclipse)</li>",
	"<li>You have read (or at least skimmed) Chris Grindstaff's <a href = 'https://www.ibm.com/developerworks/library/j-findbug2/'>high level overview</a> of building a FindBugs detector at least once.  Don't worry if you don't understand everything, we'll be covering a lot of the topics and, trust me, things get much clearer when you do them yourself.</li>",
	"<li>You've read the <a href='http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html'>JavaDoc</a> for Executors (the protagonist of our story) and perhaps browsed <a href='http://www.javacodegeeks.com/2013/01/java-thread-pool-example-using-executors-and-threadpoolexecutor.html'>this sample code</a> to get a feel for things.</li></ul></p>",
	
	"<h3>Setting up our TestBed</h3>",
	
	"<h3>Finding some code to work with</h3>",
	
	"<h3>Detecting no shutdown() calls</h3>",
	
	"<h3>Detecting local ExecutorServices</h3>",
	
	"<h3>Detecting the replacement of an ExecutorService</h3>",
	
	"<h3>Merging in my contribution</h3>"
	]
    }]
};