var contextPosts = {
    posts: [
    /*  new post
    {
        id: 'n',
        title: "",
        author: { name: "Kevin Lubick" },
        date: new Date('4-28-2014 13:00:00'),
		tags: ["",""],
        excerpt: "",
        bodyArr:[
		"",
		""
		]
    }  
    */

    {
        id: '1',
        title: "Building my First Findbugs Detector",
        author: { name: "Kevin Lubick" },
        date: new Date('4-28-2014 13:00:00'),
		tags: ["FindBugs", "fb-contrib", "tutorial", "verbose"],
        excerpt: "My less-than-legendary, yet successful story of building a <a href='http://findbugs.sourceforge.net/'>FindBugs</a> plugin to detect ExecutorServices that have not been properly shutdown.  <a href='https://github.com/mebigfatguy/fb-contrib/pull/14'>End result</a>.",
        bodyArr: [
	"<p class='log'>Code log entry 084: After roughly 187 minutes of analyzing using the <a target=\'_blank\' style=\'target-new: tab;\' href = 'http://docs.oracle.com/javase/6/docs/technotes/tools/share/jvisualvm.html'>Java Visual VM</a>, the cause of the non-terminating program was found.  A lone ExecutorService was found to have never been shutdown(), and the internal thread pool had been keeping the JVM from terminating.  A proper call to shutdown() was added to the offending class's stop() method, resolving the issue.</p>",
	
	"<p>The problem I ran into above was a painful one to track down, but my intuition said the problem would make for a great <a target=\'_blank\' style=\'target-new: tab;\' href='http://findbugs.sourceforge.net/'>FindBugs</a> detector because it dealt with omission of code, which is easy for static analysis to detect and generally time-consuming for humans to detect.</p>",
	
	"<p>What follows is how I designed a detector to hopefully make the struggles detailed in entry 084 obsolete.  It is meant for readers who have not yet implemented a FindBugs detector, but are curious at what it entails and what a sample workflow might be.</p>",
	
	"<h2>Recipe for FindBugs Detector</h2>",
	
	"<div class='recipe'><dl><dt>Preparation time</dt> <dd>30m</dd><dt>Coding time</dt> <dd>1h</dd><dt>Difficulty</dt> <dd>Derived from existing detector</dd><dt>Serves</dt> <dd>the purpose of a nice, easy introduction</dd></dl></div>",
	
	"<p>When I implemented this detector, I contributed it to fb-contrib.  Pedagogically, if you don't have to worry about messing up the actual FindBugs code and you want to focus more on the detector and less on all of FindBugs internals, so I recommend doing the same for your first detector.</p>",
	
    "<p>This recipe assumes the following conditions: <ul>",
	"<li>You have the source code for both FindBugs and <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/mebigfatguy/fb-contrib'>fb-contrib</a> downloaded and ready to build (I recommend Eclipse)</li>",
	"<li>You have read (or at least skimmed) Chris Grindstaff's <a target=\'_blank\' style=\'target-new: tab;\' href = 'https://www.ibm.com/developerworks/library/j-findbug2/'>high level overview</a> of building a FindBugs detector at least once.  Don't worry if you don't understand everything, we'll be covering a lot of the topics and, trust me, things get much clearer when you do them yourself.</li>",
	"<li>You've read the <a  target=\'_blank\' style=\'target-new: tab;\' href='http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html'>JavaDoc</a> for Executors (the protagonist of our story) and perhaps browsed <a target=\'_blank\' style=\'target-new: tab;\' href='http://www.javacodegeeks.com/2013/01/java-thread-pool-example-using-executors-and-threadpoolexecutor.html'>this sample code</a> to get a feel for things.</li>",
	"<li>You have a JDK installed, and a reference to it in your path.</li></ul></p>",
	
	"<h3>Setting up our TestBed</h3>",
	'<p>If you have ever done Test Driven Development, writing your test code first is not a new idea.  For building FindBugs detectors, it is even more important because we need the source code to generate the Java bytecode that FindBugs scans.  I haven\'t found a way to make FindBugs operate in a unit test scenario (i.e. run tests and watch a green bar as they pass), but I still write test cases with code that should and should not work.</p>',
	
	"<p>Let's make a file, called HES_Sample.java, that will contain some buggy code.  I immediately replicated (and simplified) the case that caused me 3 hours of debugging to track down, as well as the fixed version:</p>",
	'<div class="codeContainer"><pre data-src="blog/code/first_detector_oneUnitTest.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment"><span class="mouseComment" data-show="5+19">Lines 5 and 19: I tend to use this //tag and //no tag notation to indicate that FindBugs should put a notification on the next line.  </span>',
	'<span class="mouseComment" data-show="30">Line 30: This call to shutdown() is what we will look for to determine if an ExecutorService has to the potential to ever be shutdown, or not (like the example above)</span>',
	'<span class="mouseComment" data-show="34">Line 34: I made a dummy class to save on typing lots of anonymous classes. </span>',
	'</div></div>',
	"<p>For those of you thinking ahead, there are (at least) two more cases where ExecutorServices can be left hanging, or be misused, which we'll hit in later sections.</p>",
	
	"<h3>Finding some detector code to work with</h3>",
	"<p>Chris Grindstaff recommends finding a similar detector to base our new detector off, and I heartily agree, especially for the first, second or nth detector that you plan to write.</p>",
	
	"<p>There is no magic way to find a similar enough detector, but I've had luck browsing through the fb-contrib <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/mebigfatguy/fb-contrib/blob/master/etc/messages.xml'>messages.xml</a> file until I find a message that seems familiar.  I, by a stroke of luck, had been recently improving the message on the <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/kjlubick/fb-contrib/blob/0ca6d7b2b2ba74abe588630d55d04ae0924f94a4/src/com/mebigfatguy/fbcontrib/detect/PossibleMemoryBloat.java'>PMB_PossibleMemoryBloat detector</a>, which seemed like a good start.  It seems suitable because it detects collections that never get a call to remove(), clear() or similar methods (and thus always get larger but never get smaller), which is similar to what we want to do.</p>",
	
	'<div class="codeContainer" style="height:500px"><pre data-src="blog/code/PMB.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment">',
	"<span class='mouseComment' data-show=3>fb-contrib is released under the <a target=\'_blank\' style=\'target-new: tab;\' href='https://tldrlegal.com/license/gnu-lesser-general-public-license-v2.1-(lgpl-2.1)'>LGPL</a></span>",
	"<span class='mouseComment' data-show=6>Most detectors extend ByteCodeScanningDetector.  It gives us a framework for analyzing bytecodes without having to worry about parsing things ourselves.</span>",
	"<span class='mouseComment' data-show=8-13>This is a list of <span class='code'>Collection</span>s that PMB checks.  Why the L/ out front?  Think of that as they fully qualified compiled name of each class.</span>",
	"<span class='mouseComment' data-show=15-20>This is a list of methods that remove things from collections.</span>",
	"<span class='mouseComment' data-show=23-28>This is a list of methods that add things to collections.</span>",
	"<span class='mouseComment' data-show=32-33><span class='code'>XField</span>s are objects representing fields.  <span class='code'>FieldAnnotation</span>s point to the line number where the field is created, so we can put our notification in the right place.</span>",
	"<span class='mouseComment' data-show=43-46>This is one of the visitor methods mentioned below.</span>",
	"<span class='mouseComment' data-show=50-53>This is one of the visitor methods mentioned below.</span>",
	"<span class='mouseComment' data-show=57-60>This is one of the visitor methods mentioned below.</span>",
	"<span class='mouseComment' data-show=64-67>This is one of the visitor methods mentioned below.</span>",
	"<span class='mouseComment' data-show=70-73>This is a helper method.  We'll cover it later.</span>",
	"<span class='mouseComment' data-show=76-79>This is a helper method.  We'll cover it later.</span>",
	"<span class='mouseComment' data-show=82-85>This is a helper method.  We'll cover it later.</span>",
	"<span class='mouseComment' data-show=88-91>This is a helper method.  We'll cover it later.</span>",
	"<span class='mouseComment' data-show=94-97>This is a helper method.  We'll cover it later.</span>",
	'</div></div>',
	
	'<p>You clever people in the audience may have guessed that to make our HangingExecutors detector work, all we will need to do is copy most of this code into our detector and modify <span class="code">bloatableSigs</span> from line 8 and <span class="code">decreasingMethods</span> from line 15 to our ExecutorService specific signatures and we\'d be basically done.  You clever folk would be <b>correct</b>.</p>',
	
	'<h4>Visitor Pattern Interlude</h4>',
	'<p>Before we get into how to modify this code to suit our needs, let\'s go over the interesting parts, that is, the snipped out code and see exactly how this detection thing works.  Before we get to it, I\'d like to give a quick refresher on the <a target=\'_blank\' style=\'target-new: tab;\' href="http://en.wikipedia.org/wiki/Visitor_pattern">Visitor pattern</a> because the pattern is how detectors function -- FindBugs uses <a target=\'_blank\' style=\'target-new: tab;\' href="http://en.wikipedia.org/wiki/BCEL">BCEL</a> (<a target=\'_blank\' style=\'target-new: tab;\' href="http://commons.apache.org/proper/commons-bcel/apidocs/">JavaDocs</a>) to walk through the compiled Java bytecode and creates "events" every time it runs into things, the <span class="mouseOverMe tooltip" title="visitCodeContext()">beginning of a class</span> or an <span class="mouseOverMe tooltip" title="sawOpcode()">individual bytecode</span>, for instance. Our job is to override these listeners and keep track of the interesting bits to detect our bugs.</p>',
	
	'<p>Generally, you will need the following four visitor methods to make a detector (There are many more than these four, but these will do most of the job).  The order that these get called is: <br/><img src="images/detectors.png" title="The flow of the visitors for a BytecodeScanningDetector"/><br/>',

	'That is, for every class, visitClassContext() is called [in this method we tend to look at fields), then for every method, we get a visitMethod() [usually to get the name or reset the <span class="code mouseOverMe" title="A tool for keeping track of the most recently seen opcodes">OpcodeStack</span>], then a visitCode() [similar to visitMethod()], and then for every <span class="mouseOverMe" title="I\'ve been using opcode and bytecode a lot (for our purposes they are interchangable).  For the uninitiated, they are just a byte that is a machine instruction.">opcode</span>, a call to sawOpcode() is performed [the meat of most detectors goes here].</p>',
	
	'<h4>How does PossibleMemoryBloat work?</h4>',
	'<p>At a high level, PMB works in four steps:<ol><li>Find all <span class="code">Collection</span> fields and put them in <span class="code">bloatableCandidates</span>.</li><li>While parsing through all methods, see if things ever get added to the <span class="code">Collection</span> fields and add those to <span class="code">bloatableFields</span>.</li> <li>While parsing through all methods, remove any fields that get a call to clear(), remove() or similar.</li> <li>Report bugs on all remaining <span class="code">Collection</span> fields.</li> </ol> </p>',
	
	"<p>This seems straight forward enough.  Because <span class='code'>ExecutorService</span>s are just dangerous if they don't get shutdown, our detector will omit step 2, but I'll still walk through the original PMB source code for that step.  </p>",  
	
	"<p>The following source code handles step 1, the discovery of <span class='code'>Collection-</span>based fields:</p>",
	
	'<div class="codeContainer" style="height:500px"><pre data-src="blog/code/PMB_classContext.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment">',
	"<span class='mouseComment' data-show=15+32>Parses the fields defined in this class</span>",
	"<span class='mouseComment' data-show=19>This call to super.visitClassContext() is <b>very important</b>.  Without this call, the traversal of the class stops, meaning <u>none</u> of the other visitor methods will be called.</span>",
	"<span class='mouseComment' data-show=25-28>It's pretty typical to force any fields back to null for garbage collection to occur after you are done with the class context.</span>",
	"<span class='mouseComment' data-show=33-34>This is how you can access all the fields in a class.  Note that <span class='code'>Field</span> is the BCEL object (read: not FindBugs message compatible) and <span class='code'>XField</span>, created on line 39, is the FindBugs version (which adds some extra functionality).</span>",
	"<span class='mouseComment' data-show=37>The detector only looks at static fields, which will be around for longer than local variables, and thus more prone to bloat.</span>",
	"<span class='mouseComment' data-show=39>When at all possible, it is best to convert the BCEL objects (like <span class='code'>Field</span>, <span class='code'>Method</span>, <span class='code'>ClassDescriptor</span>) and turn them into their FindBug's equivalent (<span class='code'>XField</span>, <span class='code'>XMethod</span> and <span class='code'>XClass</span>) using the convenience\ methods in <span class='code'>XFactory</span></span>",
	"<span class='mouseComment' data-show=42+60>Detecting local instances of <a target='_blank' style='target-new: tab;' href='http://docs.oracle.com/javase/7/docs/api/java/lang/ThreadLocal.html' class='code'>ThreadLocal</a>s is also wrapped into the PMB Detector.  When we reuse this detector, we'll be able to omit this, but for now, it's a good example that one detector can be responsible for more than one bug type.</span>",
	"<span class='mouseComment' data-show=51>To report a bug, simply call reportBug() on the bugReporter with a new BugDetector. For now, don't worry about the <span class='code'>this</span>, just know that we need to have it and the name of the bug.  NORMAL_PRIORITY actually refers to confidence (!), which impacts severity.</span>",
	"<span class='mouseComment' data-show=52+61>We can customize the displayed message to include things like the class name.  The order matters, so this class annotation is referred to as Annotation Index 0</span>",
	"<span class='mouseComment' data-show=53+62>To make the message include the name of the field and make bug appear at the right line number, we need a field annotation, which we cached in parseFields(). The order matters, so this field annotation is referred to as Annotation Index 1.  Other techniques for specifying line number include using <span class='code'>SourceLineAnnotation</span>.</span>",
	'</div></div>',
	
	"<br/><p>The rest of the visitors are shown in the next code snippet.  <span class='code'>sawOpcode()</span> does most of the work.  A word of warning, some of the sawOpcode() methods in other detectors contain really long switch case methods and can be a bit daunting at first, but be strong!  Carry on!</p>",
	
	'<div class="codeContainer" style="height:500px"><pre data-src="blog/code/PMB_otherDetectors.java" class="line-numbers" data-line="1,3"></pre>',
    '<div class="codeComment">',
	"<span class='mouseComment' data-show=3>Remember this <span class='code'>Method</span> object is from the BCEL framework.  This method is more of a 'notification' call than the start of a deeper visitor pattern traversal, so, we don't need to call super.visitMethod() to continue traversing (in fact, the overridden implementation is blank)</span>",
	"<span class='mouseComment' data-show=7+14>At first blush, this method may seem similar to visitMethod(), but the key difference is that visitCode() is called as part of actually parsing the bytecode (so we need to call the super's implementation to continue parsing)</span>",
	"<span class='mouseComment' data-show=8>This is a common way to avoid doing anything in the constructor or the static initializer.</span>",
	"<span class='mouseComment' data-show=10>We'll be using the <span class='code'>OpcodeStack</span> soon, so we need to reset it to clear it out.</span>",
	'<span class="mouseComment" data-show=18> Each of these opcodes will be something off <a target=\'_blank\' style=\'target-new: tab;\' href="http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">this list</a>.  Thankfully, you won\'t have to have a bunch of magic numbers floating around your code because these are all defined in a superclass.</span>',
	"<span class='mouseComment' data-show=20>This call is probably redundant given lines 13 and 14, but it's probably better to be safe than sorry.</span>",
	"<span class='mouseComment' data-show=23>This is needed for the OpcodeStack to collect information before something is pushed or popped.</span>",
	"<span class='mouseComment' data-show=25>INVOKEVIRTUAL and INVOKEINTERFACE are two of the five bytecodes that can be used to indicate a method.  Apparently we don't need to worry about the other three.</span>",
	"<span class='mouseComment' data-show=26+27>The built-in getSigConstantOperand() returns a semi-cryptic String that indicates how many params a method call had.  <span class='mouseOverMe' title='There will not be a quiz on this, so ignore this if you want to.'>For example</span>,  \"<span class='code'>(JLjava/util/concurrent/ TimeUnit;)Z</span>\" means that a <span class='code'>long</span> and something of type type <span class='code'>java.util.concurrent. TimeUnit</span> were passed in. <span class='code'>Type.getArgumentTypes()</span> parses this into usable Objects. </span>",
	"<span class='mouseComment' data-show=29>At this point, the stack we have looks like <span id='stackPic' class='mouseOverMe'>this</span> and we want to get to the name of the method.  So, we have to dig down past the number of arguments and get that stack item.</span>",
	"<span class='mouseComment' data-show=30>Rather than casting <span class='code'>Item</span>s we pull off the stack, the convention is to call <span class='mouseOverMe' title='In this case, getXField()'>getSomething()</span> and checking the result against null.</span>",
	"<span class='mouseComment' data-show=39-41>If a field is returned, we (using static analysis) can't be sure that elsewhere, something like clear() is **not** called, so, we remove a potential false positive because following the returned value is challenging. </span>",
	"<span class='mouseComment' data-show=43-45>In all cases, we want to add the opcode to the stack (so the stack works like we expect).  Why do it in a finally block?  It's a nice safe way to make sure it will always happen, even if we happen to <span class='code'>continue</span> in one of the above branches.  Questionable practice?  Maybe.  Effective?  Yes.  Evidence that the author of the detector copied and pasted from elsewhere?  Almost certainly. </span>",
	"<span class='mouseComment' data-show=33+59>If this is an increasing method (something is added to the collection), we move the field from the <span class='mouseOverMe' title='bloatableCandidates'>candidate list</span> to the <span class='mouseOverMe' title='bloatableFields'>culprit list</span>.  Otherwise, if the method is a decreasing one, remove the field from both lists.</span>",
	"<span class='mouseComment' data-show=50>If the current opcode deals with returning something, the thing to be returned is at the top of the opcodeStack.  No need to count arguments or anything like that.</span>",
	"<span class='mouseComment' data-show=60>getNameConstantOperand() a built in method that gets us a relevant name that is associated with the current opcode.  Because the current opcode deals with a method call, we know this will be the method name.</span>",
	'</div></div>',
	
	//Activate the stackPic imageToolTip 
	"<script>$(document).ready(function() {$('#stackPic').tooltipster({content: $('<img style=\"max-height:350px;\" src=\"images/opcodeStack.png\" />')});});</script>",
	
	"<p><br/>So that was all the code in the detector.  Not trivial, but not so bad once you know a couple of FindBugs quirks, eh?  Some of you may be wondering about the message that gets displayed.  That involves three more files and is more of a bureaucratic step than a development step, therefore I'll kill two birds with one stone and explain the \"paperwork\" concepts while we make our own detector in the next section.</p>",
	
	"<h3>Building our custom \"no shutdown() calls on an ExecutorService\" detector</h3>",
	
	"<h4>Making the message and other bookkeeping</h4>",
	"<p>Before we make our code, we'll need to make a message and tell FindBugs how to invoke our detector.  That will involve adding entries to three files, <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/mebigfatguy/fb-contrib/blob/e41853af2fb5b5b44fe1ab39f1293bab19818c30/etc/bugrank.txt'>etc/bugrank.txt</a>, <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/mebigfatguy/fb-contrib/blob/1bbd37fa9738f67ccf116b005121db2f2b99f051/etc/findbugs.xml'>etc/findbugs.xml</a>, and <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/mebigfatguy/fb-contrib/blob/1bbd37fa9738f67ccf116b005121db2f2b99f051/etc/messages.xml'>etc/messages.xml</a>.</p>",
	
	'<div class="codeContainer"><pre data-src="blog/code/first_detector_modded_bugrank.css"  class="line-numbers language-java" data-line="1,3"></pre>',
    '<div class="codeComment">',
	"<span class='mouseComment' data-show=9>This is our added line, appended to the bottom (order doesn't matter).  Be <b>very</b> careful not to omit a space.  This will make FindBugs crash because of <a target=\'_blank\' style=\'target-new: tab;\' href='https://github.com/findbugs/findbugs/blob/77fea571f00ec5c04f33b45c0cf14ed2dbc25253/findbugs/src/java/edu/umd/cs/findbugs/BugRanker.java#L151'>this line of code</a>, which can lead to a terrifying wild-goose chase.</span>",
	'</div></div>',
	
	'<p>That new line of code [line 9 in the example] registers a new BugPattern called HE_EXECUTOR_NEVER_SHUTDOWN.  A BugPattern is tied to a message and lives in exactly one Detector.  A single detector can be responsible for one or more BugPatterns.  We\'ve already seen an example where one <span class="mouseOverMe" title="PossibleMemoryBloat">Detector</span> was responsible for <span class="mouseOverMe" title = "PMB_POSSIBLE_MEMORY_BLOAT and PMB_INSTANCE_BASED_THREAD_LOCAL">two BugPatterns</span>.</p>',
	
	"<h4>The modified code</h4>",
	"<h4>Finishing up</h4>"
	]
    }]
};